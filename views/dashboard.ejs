<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="/public/style.css">
    <script src="https://unpkg.com/gojs/release/go.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 50px;
            background-color: #f4f4f4;
        }
        h2 {
            color: #333;
        }
        .container {
            background: #fff;
            padding: 20px;
            margin: 20px auto;
            border-radius: 8px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            width: 80%;
            max-width: 1200px;
        }
        ul {
            list-style: none;
            padding: 0;
        }
        li {
            background: #e9ecef;
            padding: 8px;
            margin: 5px;
            border-radius: 5px;
        }
        #myDiagramDiv {
            width: 100%;
            height: 600px;
            border: 1px solid black;
            margin-top: 20px;
            background-color: white;
            overflow: hidden;
        }
        .state-filter {
            margin-bottom: 20px;
        }
        .state-filter label {
            font-weight: bold;
            margin-right: 10px;
        }
        .state-filter select {
            padding: 5px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>
    <h2>Welcome to Your Dashboard</h2>

    <!-- State Filter Dropdown -->
    <div class="state-filter">
        <label for="state-select">Select State:</label>
        <select id="state-select">
            <option value="India">All India</option>
            <option value="Andhra Pradesh">Andhra Pradesh</option>
            <option value="Arunachal Pradesh">Arunachal Pradesh</option>
            <option value="Assam">Assam</option>
            <option value="Bihar">Bihar</option>
            <option value="Chhattisgarh">Chhattisgarh</option>
            <option value="Goa">Goa</option>
            <option value="Gujarat">Gujarat</option>
            <option value="Haryana">Haryana</option>
            <option value="Himachal Pradesh">Himachal Pradesh</option>
            <option value="Jharkhand">Jharkhand</option>
            <option value="Karnataka">Karnataka</option>
            <option value="Kerala">Kerala</option>
            <option value="Madhya Pradesh">Madhya Pradesh</option>
            <option value="Maharashtra">Maharashtra</option>
            <option value="Manipur">Manipur</option>
            <option value="Meghalaya">Meghalaya</option>
            <option value="Mizoram">Mizoram</option>
            <option value="Nagaland">Nagaland</option>
            <option value="Odisha">Odisha</option>
            <option value="Punjab">Punjab</option>
            <option value="Rajasthan">Rajasthan</option>
            <option value="Sikkim">Sikkim</option>
            <option value="Tamil Nadu">Tamil Nadu</option>
            <option value="Telangana">Telangana</option>
            <option value="Tripura">Tripura</option>
            <option value="Uttar Pradesh">Uttar Pradesh</option>
            <option value="Uttarakhand">Uttarakhand</option>
            <option value="West Bengal">West Bengal</option>
            
        </select>
        <button onclick="fetchJobRecommendations()">Fetch Jobs</button>
    </div>

    <div class="container">
        <h3>Your Extracted Skills:</h3>
        <div id="skills-container">
            <p id="skills-text">Loading skills...</p>
        </div>
    </div>

    <div class="container">
        <h3>Suggested Career Progression Paths:</h3>
        <div id="roles-container">
            <p id="roles-text">Fetching career suggestions...</p>
        </div>
    </div>

    <div class="container">
        <h3>Job Recommendations:</h3>
        <div id="jobs-container">
            <p id="jobs-text">Fetching job recommendations...</p>
        </div>
    </div>

    <div class="container">
        <h3>Career Progression Visualization:</h3>
        <div id="myDiagramDiv"></div>
    </div>

    <form action="/upload" method="POST" enctype="multipart/form-data">
        <input type="file" name="resume" accept=".pdf" required>
        <button type="submit">Upload Resume</button>
    </form>

    <a href="/logout">Logout</a>

    <script>
        async function fetchSkillsAndRoles() {
            try {
                const skillsRes = await fetch("/api/skills");
                const skillsData = await skillsRes.json();
                document.getElementById("skills-text").innerText = skillsData.skills || "No skills found";

                const rolesRes = await fetch("/api/career-path");
                const rolesData = await rolesRes.json();

                const rolesContainer = document.getElementById("roles-container");
                rolesContainer.innerHTML = "";

                let nodeDataArray = [{ key: "Career Path", text: "Career Path", category: "Root" }];
                let linkDataArray = [];
                let validSkills = new Set();
                let colors = ["#FFB6C1", "#87CEFA", "#98FB98", "#FFD700", "#FFA07A"];
                let colorIndex = 0;
                let skillColorMap = {};

                if (Object.keys(rolesData.careerPaths).length > 0) {
                    for (const skill in rolesData.careerPaths) {
                        const careerRoles = rolesData.careerPaths[skill];
                        if (careerRoles.length > 0) {
                            validSkills.add(skill);
                            let skillColor = colors[colorIndex % colors.length];
                            skillColorMap[skill] = skillColor;
                            colorIndex++;

                            nodeDataArray.push({ key: skill, text: skill, isSkill: true, color: skillColor, icon: "ðŸ’¡" });
                            linkDataArray.push({ from: "Career Path", to: skill });

                            const roleList = careerRoles.map((role, index) => {
                                const numberedRole = `${index + 1}. ${role}`; // Add numbering to roles
                                nodeDataArray.push({ key: role, text: numberedRole, color: skillColor, icon: "ðŸ“Œ" });
                                linkDataArray.push({ from: skill, to: role });
                                return `<li>${numberedRole}</li>`; // Add numbering to the HTML list
                            }).join("");

                            rolesContainer.innerHTML += `<h4>${skill} Career Path:</h4><ul>${roleList}</ul>`;
                        }
                    }
                } else {
                    rolesContainer.innerHTML = "<p>No career suggestions found.</p>";
                }

                nodeDataArray = nodeDataArray.filter(node => node.key === "Career Path" || validSkills.has(node.key) || !node.isSkill);
                
                loadGoJSTree(nodeDataArray, linkDataArray);

                // Fetch job recommendations for the default state (India)
                await fetchJobRecommendations();
            } catch (error) {
                console.error("Error fetching data:", error);
                document.getElementById("roles-container").innerText = "Error loading career paths.";
                document.getElementById("jobs-container").innerText = "Error loading job recommendations.";
            }
        }

            async function fetchJobRecommendations() {
                const state = document.getElementById("state-select").value;
                try {
                    const jobsRes = await fetch(`/api/job-recommendations?state=${encodeURIComponent(state)}`);
                    const jobsData = await jobsRes.json();
                    const jobsContainer = document.getElementById("jobs-container");
                    jobsContainer.innerHTML = "";
        
                    if (jobsData.skillWiseJobs && Object.keys(jobsData.skillWiseJobs).length > 0) {
                        for (const skill in jobsData.skillWiseJobs) {
                            const jobList = jobsData.skillWiseJobs[skill].map((job, index) => {
                                return `<li>
                                    <strong>${job.title}</strong> - ${job.company_name} (${job.location})<br>
                                    <a href="${job.link}" target="_blank">View Job</a>
                                </li>`;
                            }).join("");
        
                            jobsContainer.innerHTML += `<h4>${skill} Jobs:</h4><ul>${jobList}</ul>`;
                        }
                    } else {
                        jobsContainer.innerHTML = "<p>No job recommendations found.</p>";
                    }
                } catch (error) {
                    console.error("Error fetching job recommendations:", error);
                    document.getElementById("jobs-container").innerText = "Error loading job recommendations.";
                }
            }
        
        function loadGoJSTree(nodeDataArray, linkDataArray) {
            var $ = go.GraphObject.make;
            var myDiagram = $(go.Diagram, "myDiagramDiv", {
                "undoManager.isEnabled": true,
                layout: $(go.TreeLayout, {
                    angle: 0,
                    layerSpacing: 170,
                    nodeSpacing: 30,
                    alignment: go.TreeLayout.AlignmentStart,
                    compaction: go.TreeLayout.CompactionNone
                }),
                "allowHorizontalScroll": false,
                "allowVerticalScroll": true
            });

            myDiagram.nodeTemplate = $(go.Node, "Auto",
                { isTreeExpanded: false }, 
                $(go.Shape, "RoundedRectangle", {
                    fill: "white", strokeWidth: 2
                },
                    new go.Binding("fill", "color")
                ),
                $(go.Panel, "Horizontal",
                    { margin: 5 },
                    $(go.TextBlock, { margin: 8, font: "bold 12px sans-serif" },
                        new go.Binding("text", "text")
                    ),
                    $(go.TextBlock, { margin: 5, font: "14px sans-serif" },
                        new go.Binding("text", "icon")
                    ),
                    $("TreeExpanderButton", {
                        width: 14, height: 14,
                        visible: new go.Binding("isSkill").ofObject()
                    })
                )
            );

            myDiagram.linkTemplate = $(go.Link,
                $(go.Shape, { stroke: "black", strokeWidth: 2 }),
                $(go.Shape, { toArrow: "Standard", stroke: "black", fill: "black" })
            );

            myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
        }

        window.onload = fetchSkillsAndRoles;
    </script>
</body>
</html>